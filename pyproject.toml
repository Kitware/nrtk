# :auto build-system:
[build-system]
requires = ["poetry-core>=1.9"]
build-backend = "poetry.core.masonry.api"
# :auto build-system:

# :auto package-meta:
[tool.poetry]
name = "nrtk"
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "nrtk", from="src"}]
documentation = "https://nrtk.readthedocs.io/"
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Unix',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
# :auto package-meta:
# package-specific meta, don't put this in "generated package-meta"
authors = ["Kitware, Inc. <nrtk@kitware.com>"]
version = "0.14.0"
description = "An open source toolkit for evaluating the natural robustness of computer vision algorithms."

[tool.poetry.dependencies]
# :auto python-version:
python = "^3.9"
# :auto python-version:

# Python capped to <3.13 because of:
# https://stackoverflow.com/questions/77431252/why-doesnt-poetry-select-the-good-version-of-my-dependency
numpy = [
    {version = ">=1.22,<2.0", python = "<3.12" }, # CVE-2021-34141
    {version = "^1.26", python = ">=3.12,<3.13" } # numpy==1.26 is the first release supporting python 3.12
]
Pillow = ">=10.3.0" # CVE-2024-28219
scikit-image = [
    {version = ">=0.21", python = "<3.12"},
    {version = ">=0.22", python = ">=3.12"}
]
smqtk-classifier = ">=0.19.0"
smqtk-core = ">=0.19"
smqtk-detection = ">=0.19.0"
smqtk-image-io = ">=0.17.1"
tqdm = ">=4.64"
pycocotools = ">=2.0.6"
setuptools = ">=65.6.1"

# This does not work with poetry install but does work with pip. Poetry
# has a PR working on it and hopefully won't be too far into the future
# https://github.com/python-poetry/poetry/pull/9553
pybsm = [
    {version = ">=0.8.0", optional = true},
    {version = ">=0.8.0", extras=["graphics"], markers = "extra == 'pybsm-graphics'", optional = true},
    {version = ">=0.8.0", extras=["headless"], markers = "extra == 'pybsm-headless'", optional = true},
]
opencv-python = {version = ">=4.6", optional = true}
opencv-python-headless = {version = ">=4.6", optional = true}

[tool.poetry.extras]
# opencv based dependencies
graphics = ["opencv-python"]
headless = ["opencv-python-headless"]
# pybsm based dependencies
pybsm = ["pybsm"]
pybsm-graphics = ["pybsm"]
pybsm-headless = ["pybsm"]

# :auto dev-linting:
# Linting
[tool.poetry.group.dev-linting]
optional = true

[tool.poetry.group.dev-linting.dependencies]
flake8 = ">=6"
flake8-mutable = ">=1.2.0"
pyproject-flake8 = ">=6"
mypy = ">=0.991,!=1.11.0"
pre-commit = ">=2.20"
ruff = "^0.1.0"
types-setuptools = ">=65.6.0.1"
black = {version = ">=24.3.0", extras=["jupyter"]}
sphinx-lint = ">=1.0.0"
# :auto dev-linting:

# :auto dev-docs:
# Docs
[tool.poetry.group.dev-docs]
optional = true

[tool.poetry.group.dev-docs.dependencies]
Sphinx = ">=5.3.0"
sphinx-copybutton = "^0.5.2"
sphinx-rtd-theme = ">=1.1.1"
sphinx-prompt = ">=1.5.0"
sphinx-click = ">=5.0.0"
livereload = ">=2.6.3"
# :auto dev-docs:

# :auto dev-testing:
# Testing
[tool.poetry.group.dev-testing]
optional = true

[tool.poetry.group.dev-testing.dependencies]
coverage = ">=6.5.0"
pytest = ">=7.2.0"
pytest-cov = ">=4.0.0"
syrupy = ">=4.0.0"
# Jupyter notebook testing
notebook = ">=7.0.7"
papermill = ">=2.4.0"
# :auto dev-testing:

[tool.poetry.plugins."smqtk_plugins"]
# Add implementation sub-module exposure here.
"impls.gen_object_detector_blackbox_response.simple_generic_generator" = "nrtk.impls.gen_object_detector_blackbox_response.simple_generic_generator"
"impls.gen_object_detector_blackbox_response.simple_pybsm_generator" = "nrtk.impls.gen_object_detector_blackbox_response.simple_pybsm_generator"
"impls.perturb_image.generic.nop_perturber" = "nrtk.impls.perturb_image.generic.nop_perturber"
"impls.perturb_image.generic.PIL.enhance" = "nrtk.impls.perturb_image.generic.PIL.enhance"
"impls.perturb_image.generic.cv2.blur" = "nrtk.impls.perturb_image.generic.cv2.blur"
"impls.perturb_image.generic.skimage.random_noise" = "nrtk.impls.perturb_image.generic.skimage.random_noise"
"impls.perturb_image.pybsm.perturber" = "nrtk.impls.perturb_image.pybsm.perturber"
"impls.perturb_image.pybsm.jitter_otf_perturber" = "nrtk.impls.perturb_image.pybsm.jitter_otf_perturber"
"impls.perturb_image_factory.generic.step" = "nrtk.impls.perturb_image_factory.generic.step"
"impls.perturb_image_factory.pybsm" = "nrtk.impls.perturb_image_factory.pybsm"
"impls.score_detections.class_agnostic_pixelwise_iou_scorer" = "nrtk.impls.score_detections.class_agnostic_pixelwise_iou_scorer"
"impls.score_detections.coco_scorer" = "nrtk.impls.score_detections.coco_scorer"
"impls.score_detections.nop_scorer" = "nrtk.impls.score_detections.nop_scorer"
"impls.score_detections.random_scorer" = "nrtk.impls.score_detections.random_scorer"
"impls.image_metric.snr_image_metric" = "nrtk.impls.image_metric.snr_image_metric"

# :auto pytest:
[tool.pytest.ini_options]
addopts = [
    "-lv",                              # Show local in trace-backs.
    "--doctest-modules",                # Increased verbosity.
    "--tb=long",                        # Trace-back print mode.
    "--cov=./src/nrtk",          # Cover our package specifically
    "--cov=./tests",                    # Also cover our tests for dead spots
    "--cov-report=term",                # Coverage report to terminal
    "--cov-report=xml:coverage.xml",    # for external tool reporting
]
testpaths = [
    "tests",
    "src/nrtk",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]
# :auto pytest:

# :auto flake8:
[tool.flake8]
exclude = [
    "__pycache__",
    ".eggs",
    ".venv",
    "docs",
    "scripts"
]
# While a max length of 79 is encouraged, sometimes going over makes more sense
# for overall clarity.
max-line-length = 120
# :auto flake8:

# :auto black:
[tool.black]
# The regular expression pattern must be written as a single line;
# otherwise pytest-black fails to exclude the folders. For details see
# https://github.com/shopkeep/pytest-black/issues/36
exclude = '(/(\.git|.venv|.eggs|docs|scripts$)/)'
line-length = 120
# :auto black:

# :auto ruff:
[tool.ruff]
select = ["E", "W", "F", "I", "D", "A", "B", "N", "YTT", "C4", "PT"]
line-length = 120

ignore = [
    # -- Ignore these rules, since they contradict our coding standards
    "C408",  # JATIC guidelines prefer "list()", rather than "[]", to create an empty list
    "C416",  # JATIC guidelines prefer "dict()", rather than "{}", to create an empty dict
    # -- Ignoring these "Missing Docstring" errors for now, we will fix later
    "D100", "D101", "D102", "D103", "D104", "D105", "D107"
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pycodestyle]
max-doc-length = 120

[tool.ruff.isort]
known-first-party = ["nrtk"]
# :auto ruff:

# :auto mypy:
[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = false
incremental = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
# :auto mypy:
